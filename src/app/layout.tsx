"use client";

import "@/utils/logger"; 
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { QueryClientProvider } from "@tanstack/react-query";
import Providers from "@/provider/QueryProvider";
import { TurborepoAccessTraceResult } from "next/dist/build/turborepo-access-trace";
import { Toaster } from "sonner";
import OverflowFixer from "@/components/utils/OverflowFixer";
import { useAlarmStore } from "@/stores/useHospitalUUIDStore";
import { useReservationRealtime } from "@/hooks/useReservationRealtime";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { info } = useAlarmStore(); // 1. 로그인 전에는 null
  const hospitalId = info?.id_uuid_hospital;

  // ✅ Hook을 조건 없이 항상 호출 (Rules of Hooks)
  useReservationRealtime(hospitalId || '');

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>
          <OverflowFixer />
          {children}
          <Toaster richColors position="top-center" duration={1500}/>
        </Providers>
      </body>
    </html>
  );
}
